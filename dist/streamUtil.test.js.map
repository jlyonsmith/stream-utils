{"version":3,"sources":["../src/streamUtil.test.js"],"names":["test","s","testStream","Readable","read","push","result","expect","toBeInstanceOf","Buffer","toEqual","from","toBe","writable","Writable","write","chunk","encoding","callback","readable","resolves","toBeUndefined","errorReadable","destroy","Error","rejects","errorWritable","toString"],"mappings":"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","sourcesContent":["import { Readable, Writable } from \"stream\"\nimport {\n  streamToBuffer,\n  pipeToPromise,\n  stringToStream,\n  streamToString,\n} from \"./streamUtil\"\n\ntest(\"streamToBuffer\", async () => {\n  const s = \"Hello World\"\n  const testStream = new Readable({\n    read() {\n      this.push(s)\n      this.push(null)\n    },\n  })\n\n  const result = await streamToBuffer(testStream)\n\n  expect(result).toBeInstanceOf(Buffer)\n  expect(result).toEqual(Buffer.from(s))\n})\n\ntest(\"streamToString\", async () => {\n  const s = \"Brown Fox\"\n  const testStream = new Readable({\n    read() {\n      this.push(s)\n      this.push(null)\n    },\n  })\n  const result = await streamToString(testStream)\n\n  expect(result).toBe(s)\n})\n\ntest(\"pipeToPromise\", async () => {\n  const writable = new Writable({\n    write(chunk, encoding, callback) {\n      callback()\n    },\n  })\n\n  // The null push is required to end the nodesJS Stream\n  let readable = new Readable({\n    read() {\n      this.push(\"test\")\n      this.push(null)\n    },\n  })\n\n  await expect(pipeToPromise(readable, writable)).resolves.toBeUndefined()\n\n  const errorReadable = new Readable({\n    read() {\n      this.destroy(new Error())\n    },\n  })\n\n  await expect(pipeToPromise(errorReadable, writable)).rejects.toBeInstanceOf(\n    Error\n  )\n\n  const errorWritable = new Writable({\n    write(chunk, encoding, callback) {\n      this.destroy(new Error())\n    },\n  })\n  readable = new Readable({\n    read() {\n      this.push(\"test\")\n      this.push(null)\n    },\n  })\n\n  await expect(pipeToPromise(readable, errorWritable)).rejects.toBeInstanceOf(\n    Error\n  )\n})\n\ntest(\"stringToStream\", () => {\n  const s = \"abc\"\n  const readable = stringToStream(s)\n\n  expect(readable).toBeInstanceOf(Readable)\n  expect(readable.read().toString()).toBe(s)\n})\n"],"file":"streamUtil.test.js"}